name: User Profile CD

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - features/*
    # paths:
    #   - apis/userprofile/**

env:
  RESOURCES_PREFIX: devopsoh90
  WORKDIR: "apis/userprofile"
  DOCKER_IMAGE_BASE_NAME: "devopsoh/api-userprofile"
  API_NAME: "userprofile"

jobs:
  build:
    name: "Build"
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE_FULL_NAME: ${{ steps.dockerfullname.outputs.DOCKER_IMAGE_FULL_NAME }}
    steps:
      - uses: actions/checkout@v3.5.0
        name: Checkout code

      - name: Get docker image full name
        run: |
          DOCKER_IMAGE_FULL_NAME=${{ env.RESOURCES_PREFIX }}cr.azurecr.io/${{ env.DOCKER_IMAGE_BASE_NAME }}

          # Set for current Job
          echo "DOCKER_IMAGE_FULL_NAME=${DOCKER_IMAGE_FULL_NAME}" >> ${GITHUB_ENV}

          # Set for next Job
          echo "::set-output name=DOCKER_IMAGE_FULL_NAME::${DOCKER_IMAGE_FULL_NAME}"
        id: dockerfullname

      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: "Build Docker image using Azure Container Registry"
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az account show
            az acr build --image ${{ env.DOCKER_IMAGE_BASE_NAME }}:${{ github.run_id }} --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }} --registry ${{ env.RESOURCES_PREFIX }}cr.azurecr.io --build-arg build_version=${{ github.run_id }} --verbose --file ${{ env.WORKDIR }}/Dockerfile ${{ env.WORKDIR }}
 
  staging:
    name: "Staging (Blue)"
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: poi-staging
      url: "${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/version/${{ env.API_NAME }}"
    env:
      DOCKER_IMAGE_FULL_NAME: "${{ needs.build.outputs.DOCKER_IMAGE_FULL_NAME }}"
    steps:
      # Login to Azure with Service Principal
      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      # Set new Docker image in WebApp
      - name: Azure WebApp
        id: deploy-to-webapp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }}
          images: "${{ env.DOCKER_IMAGE_FULL_NAME }}:${{ github.run_id }}"
          slot-name: 'staging'

      
      - name: Check the deployed service health check
        uses: jtalk/url-health-check-action@v2
        with:
          url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/healthcheck/${{ env.API_NAME }}
          follow-redirect: true
          max-attempts: 60
          retry-delay: 10s
          retry-all: true

  production:
    name: "Production (Green)"
    needs:
      - staging
      - build
    runs-on: ubuntu-latest
    environment:
      name: poi-production
      url: "https://${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }}.azurewebsites.net/api/version/${{ env.API_NAME }}"
    env:
      RESOURCES_PREFIX: ${{ needs.build.outputs.RESOURCES_PREFIX }}
    steps:
      - name: "Azure Login"
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Swap WebApp slots"
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az webapp deployment slot swap --resource-group ${{ env.RESOURCES_PREFIX }}rg --name ${{ env.RESOURCES_PREFIX }}${{ env.API_NAME }} --slot staging --target-slot production